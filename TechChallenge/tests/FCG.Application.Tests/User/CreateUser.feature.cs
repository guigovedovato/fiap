// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace FCG.Application.Tests.User
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CreateUserFeature : object, Xunit.IClassFixture<CreateUserFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "User", "Create User", "This feature is about creating a new user.\r\n\r\nThere are 3 validations:\r\n* User em" +
                "ail must be unique\r\n* Email must be valid\r\n* Password must be at least 8 charact" +
                "ers long with numbers, letters and special characters", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "CreateUser.feature"
#line hidden
        
        public CreateUserFeature(CreateUserFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            try
            {
                await this.TestInitializeAsync();
            }
            catch (System.Exception e1)
            {
                try
                {
                    ((Xunit.IAsyncLifetime)(this)).DisposeAsync();
                }
                catch (System.Exception e2)
                {
                    throw new System.AggregateException("Test initialization failed", e1, e2);
                }
                throw;
            }
        }
        
        async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="User is created successfully")]
        [Xunit.TraitAttribute("FeatureTitle", "Create User")]
        [Xunit.TraitAttribute("Description", "User is created successfully")]
        [Xunit.TraitAttribute("Category", "success")]
        [Xunit.TraitAttribute("Category", "user")]
        [Xunit.TraitAttribute("Category", "create")]
        public async global::System.Threading.Tasks.Task UserIsCreatedSuccessfully()
        {
            string[] tagsOfScenario = new string[] {
                    "success",
                    "user",
                    "create"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("User is created successfully", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 13
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 14
 await testRunner.GivenAsync("the user started the registration", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "email",
                            "password",
                            "firstName",
                            "lastName",
                            "id"});
                table3.AddRow(new string[] {
                            "email@correto.com",
                            "P4$$w0rd",
                            "FirstName",
                            "LastName",
                            "0"});
#line 15
 await testRunner.AndAsync("add the values to the user", ((string)(null)), table3, "And ");
#line hidden
#line 18
 await testRunner.WhenAsync("the client sends the request", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 19
 await testRunner.ThenAsync("the user is created and the id is returned", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Email is not valid")]
        [Xunit.TraitAttribute("FeatureTitle", "Create User")]
        [Xunit.TraitAttribute("Description", "Email is not valid")]
        [Xunit.TraitAttribute("Category", "error")]
        [Xunit.TraitAttribute("Category", "user")]
        [Xunit.TraitAttribute("Category", "create")]
        [Xunit.TraitAttribute("Category", "email")]
        public async global::System.Threading.Tasks.Task EmailIsNotValid()
        {
            string[] tagsOfScenario = new string[] {
                    "error",
                    "user",
                    "create",
                    "email"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Email is not valid", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 22
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 23
 await testRunner.GivenAsync("the user started the registration", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table4 = new global::Reqnroll.Table(new string[] {
                            "email",
                            "password",
                            "firstName",
                            "lastName",
                            "id"});
                table4.AddRow(new string[] {
                            "email",
                            "P4$$w0rd",
                            "FirstName",
                            "LastName",
                            "0"});
#line 24
 await testRunner.AndAsync("add the values to the user", ((string)(null)), table4, "And ");
#line hidden
#line 27
 await testRunner.WhenAsync("the client sends the request", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 28
 await testRunner.ThenAsync("the user is not created with the message \"Invalid email format\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Password is not valid")]
        [Xunit.TraitAttribute("FeatureTitle", "Create User")]
        [Xunit.TraitAttribute("Description", "Password is not valid")]
        [Xunit.TraitAttribute("Category", "error")]
        [Xunit.TraitAttribute("Category", "user")]
        [Xunit.TraitAttribute("Category", "create")]
        [Xunit.TraitAttribute("Category", "password")]
        public async global::System.Threading.Tasks.Task PasswordIsNotValid()
        {
            string[] tagsOfScenario = new string[] {
                    "error",
                    "user",
                    "create",
                    "password"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Password is not valid", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 31
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 32
 await testRunner.GivenAsync("the user started the registration", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table5 = new global::Reqnroll.Table(new string[] {
                            "email",
                            "password",
                            "firstName",
                            "lastName",
                            "id"});
                table5.AddRow(new string[] {
                            "email@correto.com",
                            "password",
                            "FirstName",
                            "LastName",
                            "0"});
#line 33
 await testRunner.AndAsync("add the values to the user", ((string)(null)), table5, "And ");
#line hidden
#line 36
 await testRunner.WhenAsync("the client sends the request", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 37
 await testRunner.ThenAsync("the user is not created with the message \"Invalid password format\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Email already exists")]
        [Xunit.TraitAttribute("FeatureTitle", "Create User")]
        [Xunit.TraitAttribute("Description", "Email already exists")]
        [Xunit.TraitAttribute("Category", "error")]
        [Xunit.TraitAttribute("Category", "user")]
        [Xunit.TraitAttribute("Category", "create")]
        [Xunit.TraitAttribute("Category", "username")]
        public async global::System.Threading.Tasks.Task EmailAlreadyExists()
        {
            string[] tagsOfScenario = new string[] {
                    "error",
                    "user",
                    "create",
                    "username"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Email already exists", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 40
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 41
 await testRunner.GivenAsync("the user started the registration", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table6 = new global::Reqnroll.Table(new string[] {
                            "email",
                            "password",
                            "firstName",
                            "lastName",
                            "id"});
                table6.AddRow(new string[] {
                            "email@correto.com",
                            "P4$$w0rd",
                            "FirstName",
                            "LastName",
                            "0"});
#line 42
 await testRunner.AndAsync("add the values to the user", ((string)(null)), table6, "And ");
#line hidden
#line 45
 await testRunner.AndAsync("the user already exists in the system", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 46
 await testRunner.WhenAsync("the client sends the request", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 47
 await testRunner.ThenAsync("the user is not created with the message \"User with this email already exists\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await CreateUserFeature.FeatureSetupAsync();
            }
            
            async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await CreateUserFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
